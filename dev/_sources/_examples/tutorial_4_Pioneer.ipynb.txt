{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Tutorial 4 - Pioneer\n",
    "This tutorial models a potential design for a WEC used to provide power to instruments in the [Pioneer Central Surface Mooring System](https://oceanobservatories.org/site/cp01cnsm/) within the National Science Foundation Ocean Observatories Initiative [Coastal Pioneer Array](https://oceanobservatories.org/array/coastal-pioneer-array/).\n",
    "This system has instrumentation to measure various meteorological, surface, near-surface, and seabed phenomena on the Continental Shelf-Slope and transmit back to shore.\n",
    "\n",
    "Unlike previous tutorials, this tutorial does not include an outer optimization loop.\n",
    "Instead, the focus here is on effectively modeling an optimization problem for the control of a unique WEC archetype with a pitch resonator PTO with several co-dependent components.\n",
    "This is completely setup in Part 1, and includes:\n",
    "\n",
    "* Expanding the control state vector\n",
    "* Custom PTO physics\n",
    "* Modeling non-hydrodynamic degrees of freedom\n",
    "\n",
    "This tutorial is divided into three parts.\n",
    "The first sets up the problem including the points above.\n",
    "The second and third show results using a regular and irregular wave, respectively.\n",
    "\n",
    "1. [Model setup](#1.-Model-setup)\n",
    "2. [Regular wave results](#2.-Regular-wave-results)\n",
    "3. [Irregular wave](#3.-Irregular-wave)\n",
    "\n",
    "\n",
    "<p><img src=https://oceanobservatories.org/wp-content/uploads/2015/09/Central-Surface-Mooring-Array-01-1.png alt=\"Diagram of the Pioneer device\" width=\"200\"></p>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import capytaine as cpy\n",
    "from capytaine.io.meshio import load_from_meshio\n",
    "import autograd.numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.linalg import block_diag\n",
    "import xarray as xr\n",
    "from math import comb\n",
    "\n",
    "import wecopttool as wot\n",
    "\n",
    "## set colorblind-friendly colormap for plots\n",
    "plt.style.use('tableau-colorblind10')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1. Model setup\n",
    "\n",
    "### 1.1 Waves\n",
    "We start with setting up the different waves we want to model, as this will inform what to select for our frequency range, which we need throughout the rest of the problem setup. \n",
    "We will consider two waves: a regular wave and an irregular wave, both with typical characteristics of the deployment site.\n",
    "The regular wave is roughly at 0.35 Hz, the known pitch resonance frequency of the buoy.\n",
    "The irregular wave has a peak period of 5 seconds, matching that of the deployment site.\n",
    "\n",
    "Please refer to Tutorial 3 for information about selecting the number of realizations.\n",
    "For the purpose of the tutorial, the number of realizations has been set to 2 to reduce runtime.\n",
    "\n",
    "The procedure for determining an appropriate frequency array for irregular wave conditions is detailed at the end of this tutorial."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "fend = 1.875\n",
    "nfreq_irreg = 150\n",
    "f1_irreg = fend / nfreq_irreg\n",
    "\n",
    "f1_reg = .325/2\n",
    "nfreq_reg = 12"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# regular\n",
    "amplitude = 0.15\n",
    "wavefreq = 0.325\n",
    "waves_regular = wot.waves.regular_wave(f1_reg, nfreq_reg, wavefreq, amplitude)\n",
    "\n",
    "# irregular\n",
    "Hs = 1.5\n",
    "Tp = 5 \n",
    "nrealizations = 2\n",
    "\n",
    "fp = 1/Tp\n",
    "spectrum = lambda f: wot.waves.pierson_moskowitz_spectrum(f, fp, Hs)\n",
    "efth = wot.waves.omnidirectional_spectrum(f1_irreg, nfreq_irreg, spectrum, \"Pierson-Moskowitz\")\n",
    "waves_irregular = wot.waves.long_crested_wave(efth, nrealizations=nrealizations)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We plot the wave elevation spectra to check if the chosen frequency array covers the main excitation frequency, converges to zero for larger frequencies and can capture multiple harmonics which are required for nonlinear dynamics, since the states are multiplied with each other."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#TODO: highlight the harmonics if wave freq and Tp with other markers+colors\n",
    "fig, ax = plt.subplots()\n",
    "np.abs(waves_regular).plot(marker = 'x', label=\"regular\")\n",
    "np.abs(waves_irregular.sel(realization=0)).plot(marker = '*', label=\"irregular\")\n",
    "ax.set_title('Wave elevation spectrum', fontweight='bold')\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1.2 Basic properties\n",
    "\n",
    "#### Geometry\n",
    "To get the required hydrodynamic coefficients of the Pioneer design, we only need to be concerned with creating a mesh of the buoy geometry.\n",
    "The buoy has the same general shape as the WaveBot used in Tutorial 1, so we will use the build-in `geom.WaveBot` object and change the dimensions to simplify the mesh creation process."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "in2m = 0.0254 # inch -> meter conversion factor\n",
    "draft = 0.5 # meters\n",
    "freeboard = 40. * in2m - draft\n",
    "hull_geom = wot.geom.WaveBot(r1=130./2 * in2m,\n",
    "                             r2=110./2 * in2m, \n",
    "                             h1=22.679 * in2m,\n",
    "                             h2=17.321 * in2m,\n",
    "                             scale_factor=1,\n",
    "                             freeboard=freeboard)\n",
    "mesh = hull_geom.mesh(mesh_size_factor=0.3)\n",
    "_ = hull_geom.plot_cross_section()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Design properties\n",
    "The Pioneer team has developed initial specifications for a full-sized WEC design that fits within the buoy dimensions and operating at resonance.\n",
    "There are several components that we need to capture in the PTO model:\n",
    "\n",
    "* **Buoy**: As mentioned, this has the same basic geometric parameters as the WaveBot used in Tutorial 1.\n",
    "Since we're only modeling the pitch degree of freedom, we only need the pitch moment of inertia and not the mass of the buoy.\n",
    "* **Flywheel**: The flywheel is contained and dimensioned to fit on top of the buoy.\n",
    "It rotates in pitch independently of the buoy, but is linked to the buoy through two parallel connections: the torsional spring and the generator.\n",
    "Since the flywheel is protected from wave loading by the buoy, it is **not** subject to hydrostatics or hydrodynamics.\n",
    "* **Spring**: The magnetic torsional spring provides positive stiffness to the flywheel.\n",
    "It has a linear displacement up to 45 degrees, at which point it \"wraps around\" and the stiffness begins decreasing.\n",
    "For simplicity, we will model the spring as strictly linear.\n",
    "The spring is connected to a gearbox which makes the position of the spring (and therefore, the generator shaft) different from the relative position of the flywheel and buoy. \n",
    "\n",
    "A rendering of the Pioneer WEC model is shown here with the buoy pitch in red and the flywheel pitch in green:\n",
    "<p><img src=https://live.staticflickr.com/65535/53025745404_2e75c89894_k.jpg alt=\"Diagram of the Pioneer device\" width=\"500\"></p>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "buoy_props = {\n",
    "    'CG': 0.298, # m\n",
    "    'MOI': 7484., # kg-m^2\n",
    "    'Resonance frequency': 0.35, # Hz\n",
    "}\n",
    "\n",
    "# flywheel properties at example resonance\n",
    "flywheel_properties = {\n",
    "    'coulomb_friction': 4.5, # N*m\n",
    "    'viscous_friction': 0.02, # N*ms/rad\n",
    "    'motor_gear_ratio': 0.118,\n",
    "    'MOI': 22.32, # kg*m^2\n",
    "}\n",
    "\n",
    "spring_properties = {\n",
    "    'stiffness': 835.36, # N*m/rad\n",
    "    'gear_ratio': 0.334,\n",
    "    'Max torque': 750, # N-m\n",
    "    'Max displacement': np.deg2rad(45.0), # rad\n",
    "}\n",
    "\n",
    "# PTO properties\n",
    "pto_properties = {\n",
    "    'gear_ratio': 1.0,\n",
    "    'torque_constant': 0.164,\n",
    "    'winding_resistance': 0.0718,\n",
    "    'winding_inductance': 0.0,\n",
    "    'drivetrain_inertia': 0.0,\n",
    "    'drivetrain_friction': 0.0,\n",
    "    'drivetrain_stiffness': 0.0,\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Pitch resonator\n",
    "This system uses a unique PTO system, where the generator velocity is dependent on the relative pitching rotation of the buoy and the flywheel.\n",
    "The system can be modeled as a coupled spring-mass-damper system, with the generator represented as $B_{PTO}$.\n",
    "The spring-mass-damper system and equivalent circuit model are shown below.\n",
    "Note that all of these values are rotational and are drawn here linearly for simplicity. \n",
    "\n",
    "<p><img src=https://live.staticflickr.com/65535/53025028262_1a4ba2d5ce_z.jpg alt=\"Pioneer model as a spring-mass-damper system\" width=\"500\"> <img src=https://live.staticflickr.com/65535/53025140497_29c5b9d601_z.jpg alt=\"Pioneer model as a spring-mass-damper system\" width=\"180\"></p>\n",
    "\n",
    "This corresponds to the following dynamics equations:\n",
    "\n",
    "(1)\n",
    "\n",
    "$$ [J_{buoy} + J(\\omega))] \\ddot{\\theta}_{buoy} = T_{hydro} - K_{hydro}\\theta_{buoy} - B(\\omega)\\dot{\\theta}_{buoy} - K_{spring}(\\theta_{buoy} - \\theta_{flywheel})/N^2 - (B_{PTO} + B_{fric})(\\dot{\\theta}_{buoy} - \\dot{\\theta}_{flywheel}) $$\n",
    "\n",
    "(2)\n",
    "\n",
    "$$ J_{flywheel} \\ddot{\\theta}_{flywheel} = K_{spring}(\\theta_{buoy} - \\theta_{flywheel})/N^2 + (B_{PTO} + B_{fric})(\\dot{\\theta}_{buoy} - \\dot{\\theta}_{flywheel}) $$\n",
    "\n",
    "We will explore how to capture these dynamics in WecOptTool in the following sections."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Hydrodynamics and hydrostatics\n",
    "As mentioned above, the `FloatingBody` object in Capytaine only needs to model the buoy, since no other components are being excited by the waves. \n",
    "We will not use the BEM results since we are using an empirical impedance model, but the BEM problem is still solved here for comparison purposes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "mesh_obj = load_from_meshio(mesh, 'Pioneer')\n",
    "lid_mesh = mesh_obj.generate_lid(-4e-2)\n",
    "\n",
    "pnr_fb = cpy.FloatingBody(mesh=mesh_obj, lid_mesh=lid_mesh, name=\"WaveBot\")\n",
    "pnr_fb.add_rotation_dof(name='Pitch')\n",
    "pnr_fb.center_of_mass = np.array([0., 0., buoy_props['CG']])\n",
    "pnr_fb.rotation_center = pnr_fb.center_of_mass\n",
    "ndof = pnr_fb.nb_dofs\n",
    "pnr_fb.show_matplotlib()\n",
    "\n",
    "pnr_fb.inertia_matrix = xr.DataArray(data=np.asarray(([[buoy_props['MOI']]])),\n",
    "                            dims=['influenced_dof', 'radiating_dof'],\n",
    "                            coords={'influenced_dof': list(pnr_fb.dofs),\n",
    "                                    'radiating_dof': list(pnr_fb.dofs)},\n",
    "                            name=\"inertia_matrix\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "rho = 1025. # kg/m^3\n",
    "freq_reg = wot.frequency(f1_reg, nfreq_reg, False) # False -> no zero frequency\n",
    "bem_data_reg = wot.run_bem(pnr_fb, freq_reg)\n",
    "omega_reg = bem_data_reg.omega.values\n",
    "\n",
    "freq_irreg = wot.frequency(f1_irreg, nfreq_irreg, False) # False -> no zero frequency\n",
    "bem_data_irreg = wot.run_bem(pnr_fb, freq_irreg)\n",
    "omega_irreg = bem_data_irreg.omega.values\n",
    "\n",
    "pnr_fb.keep_immersed_part()\n",
    "k_buoy = pnr_fb.compute_hydrostatic_stiffness(rho=rho).values.squeeze()\n",
    "k_spring = spring_properties['Max torque'] / spring_properties['Max displacement']\n",
    "print(f'Hydrostatic stiffness from Capytaine: {k_buoy} N-m/rad')\n",
    "print('Hydrostatic stiffness from experiment: 37204 N-m/rad')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Although the system has yet to be deployed as a WEC, the Coastal Pioneer Array itself has been collecting data from multiple locations. From the collected data, an empirical impedance model and excitation force spectrum has been developed. This empirical dataset can replace the BEM dataset in order to model the WEC dynamics. Here, we load in the data and convert it into two DataArrays for the intrinsic impedance and the excitation coefficients, respectively. We then interpolate from the empirical data to match the intended frequency array."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# load in the empirical data\n",
    "datafile = 'data/pioneer_empirical_data.npz'\n",
    "\n",
    "with np.load(datafile) as empirical_data:\n",
    "    # Access the data within the 'with' block\n",
    "    omega_data = empirical_data['omega_data']\n",
    "    exc_coeff_data = empirical_data['exc_coeff_data']\n",
    "    Zi_data = empirical_data['Zi_data']\n",
    "    Zi_stiffness = empirical_data['Zi_stiffness']\n",
    "\n",
    "dof_names = [\"Pitch\"]\n",
    "directions = [0]\n",
    "\n",
    "exc_coeff_data, Zi_data = wot.utilities.create_dataarray(Zi_data, exc_coeff_data, omega_data, directions, dof_names)\n",
    "\n",
    "# here extrapolation for impedance and padding with zeros for the excitation\n",
    "exc_coeff_intrp_reg = exc_coeff_data.interp(omega = omega_reg, method='linear', kwargs={\"fill_value\": 0})\n",
    "Zi_intrp_reg = Zi_data.interp(omega = omega_reg, kwargs={\"fill_value\": \"extrapolate\"})\n",
    "\n",
    "exc_coeff_intrp_irreg = exc_coeff_data.interp(omega = omega_irreg, method='linear', kwargs={\"fill_value\": 0})\n",
    "Zi_intrp_irreg = Zi_data.interp(omega = omega_irreg, kwargs={\"fill_value\": \"extrapolate\"})"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For validation purposes, we compare the empirical impedance and excitation to the results from BEM."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "hd = wot.add_linear_friction(bem_data_irreg, friction = None) \n",
    "# we're not actually adding friction, but need the datavariables in hd \n",
    "hd = wot.check_radiation_damping(hd)\n",
    "\n",
    "Zi_bem = wot.hydrodynamic_impedance(hd)\n",
    "fig, axes = wot.utilities.plot_bode_impedance(Zi_bem,'WaveBot Intrinsic Impedance')\n",
    "fig, axes = wot.utilities.plot_bode_impedance(Zi_data,'WaveBot Intrinsic Impedance',fig_axes=[fig, axes])\n",
    "fig, axes = wot.utilities.plot_bode_impedance(Zi_intrp_irreg,'WaveBot Intrinsic Impedance',fig_axes=[fig, axes])\n",
    "fig.set_size_inches(6, 4)\n",
    "fig.legend(('BEM Data','Empirical Data','Interpolated Empirical Data'), bbox_to_anchor=(.58, .46))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "fig, ax = plt.subplots(2, 1,tight_layout=True, sharex=True, figsize=(6, 4))\n",
    "\n",
    "ax[0].semilogx(freq_irreg, np.real(bem_data_irreg['diffraction_force'][:,0,0]+bem_data_irreg['Froude_Krylov_force'][:,0,0]), label='BEM Data')\n",
    "ax[0].semilogx(omega_data/(2*np.pi), np.real(exc_coeff_data[:,0,0]), label='Empirical Data')\n",
    "ax[0].semilogx(omega_irreg/(2*np.pi), np.real(exc_coeff_intrp_irreg[:,0,0]), label='Interpolated Empirical Data')\n",
    "ax[0].grid(True, which = 'both')\n",
    "ax[1].semilogx(freq_irreg, np.imag(bem_data_irreg['diffraction_force'][:,0,0]+bem_data_irreg['Froude_Krylov_force'][:,0,0]), label='BEM Data')\n",
    "ax[1].semilogx(omega_data/(2*np.pi), np.imag(exc_coeff_data[:,0,0]), label='Empirical Data')\n",
    "ax[1].semilogx(omega_irreg/(2*np.pi), np.imag(exc_coeff_intrp_irreg[:,0,0]), label='Interpolated Empirical Data')\n",
    "ax[1].grid(True, which = 'both')\n",
    "\n",
    "ax[0].set_ylabel('Re[Excitation]')\n",
    "ax[1].set_ylabel('Im[Excitation]')\n",
    "ax[1].set_xlabel('Frequency (Hz)')\n",
    "ax[0].legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1.3 PTO\n",
    "The generator shaft velocity is the difference between the buoy velocity and the flywheel velocity.\n",
    "Because the velocity PTO depends not only on the hydrodynamic states (`x_wec`, buoy pitch) but also on an additional non-hydrodynamic state (flywheel pitch), we cannot use the `PTO` module we have used in previous tutorials.\n",
    "We will make two adjustments to our previous modeling approach model to accurately model the PTO:\n",
    "\n",
    "1. Adjust the `x_opt` vector to include the flywheel motion\n",
    "2. Manually define the PTO dynamics and energy equations in place on the `PTO` module"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Capturing flywheel motions\n",
    "In previous tutorials, all the relevant WEC dynamics have been captured in the `x_wec` vector.\n",
    "However, `x_wec` assumes all the degrees of freedom are excited by waves, which is not the case for the flywheel in the Pioneer model.\n",
    "Instead, we will include the flywheel dynamics in the `x_opt` vector.\n",
    "\n",
    "The `x_opt` vector has previously only been used to model the PTO force.\n",
    "However, there is no limit to what `x_opt` can include; it can theoretically include anything that is needed to model the PTO control.\n",
    "Here, we will append the Fourier coefficients of the flywheel's position to `x_opt`.\n",
    "The first part of `x_opt` will continue to be used for the PTO force (i.e. Fourier coefficients of the force time-series for an unstructured controller). \n",
    "\n",
    "Note in the code further down that `x_opt` will be spliced as either `x_opt[:nstate_pto]` to exclude the flywheel position states, or `x_opt[nstate_pto:]` to exclude the PTO force states.\n",
    "Remember, `x_opt` can be defined arbitrarily, and specific meanings to the states are given elsewhere in the model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "nstate_pto = 2 * nfreq_reg # PTO forces\n",
    "nstate_fw = 2 * nfreq_reg  # Flywheel positions\n",
    "nstate_opt = nstate_pto + nstate_fw"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Manually defining PTO equations\n",
    "Instead of calling the `PTO` module, we will manually define the dynamics and energy equations needed for WecOptTool to calculate electrical power, our quantity of interest for this optimization problem.\n",
    "These equations are also needed for the additional forces and constraints defined later on.\n",
    "\n",
    "##### Relative motion\n",
    "Here we define functions for the relative motion of the buoy and flywheel, derived from `x_wec` and `x_opt` respectively."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def x_rel(wec, x_wec, x_opt):\n",
    "    pos_wec = wec.vec_to_dofmat(x_wec)\n",
    "    pos_fw = wec.vec_to_dofmat(x_opt[nstate_pto:])\n",
    "    return pos_wec - pos_fw\n",
    "\n",
    "def rel_position(wec, x_wec, x_opt, waves, nsubsteps=1):\n",
    "    pos_rel = x_rel(wec, x_wec, x_opt)\n",
    "    time_matrix = wec.time_mat_nsubsteps(nsubsteps)\n",
    "    return np.dot(time_matrix, pos_rel)\n",
    "\n",
    "def rel_velocity(wec, x_wec, x_opt, waves, nsubsteps=1):\n",
    "    pos_rel = x_rel(wec, x_wec, x_opt)\n",
    "    vel_rel = np.dot(wec.derivative_mat, pos_rel)\n",
    "    time_matrix = wec.time_mat_nsubsteps(nsubsteps)\n",
    "    return np.dot(time_matrix, vel_rel)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Unstructured controller\n",
    "This is nearly identical to the `wot.pto.controller_unstructured` function, except `x_opt` is spliced to only include the first part, since we are also including the flywheel positions in the second part of `x_opt`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def force_from_generator(wec, x_wec, x_opt, waves=None, nsubsteps=1):\n",
    "    f_fd = np.reshape(x_opt[:nstate_pto], (-1, ndof), order='F')\n",
    "    time_matrix = wec.time_mat_nsubsteps(nsubsteps)\n",
    "    torque = np.dot(time_matrix, f_fd) * flywheel_properties['motor_gear_ratio']\n",
    "    return torque"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### PTO Impedance\n",
    "The PTO impedance is defined using the same 2-port impedance model as in previous tutorials. This pto model does not account for the relative velocity, generator force, etc. so it will not be used to define the PTO in the final system. Instead, it is used to create the PTO transfer matrix which is used in the calculation of electrical power."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "drivetrain_impedance = (1j*omega_reg*pto_properties['drivetrain_inertia'] +\n",
    "                    pto_properties['drivetrain_friction'] +\n",
    "                    1/(1j*omega_reg)*pto_properties['drivetrain_stiffness'])\n",
    "\n",
    "winding_impedance = pto_properties['winding_resistance'] + 1j*omega_reg*pto_properties['winding_inductance']\n",
    "\n",
    "pto_impedance_11 = -1* pto_properties['gear_ratio']**2 * drivetrain_impedance\n",
    "off_diag = np.sqrt(3.0/2.0) * pto_properties['torque_constant'] * pto_properties['gear_ratio']\n",
    "pto_impedance_12 = -1*(off_diag+0j) * np.ones(omega_reg.shape)\n",
    "pto_impedance_21 = -1*(off_diag+0j) * np.ones(omega_reg.shape)\n",
    "pto_impedance_22 = winding_impedance\n",
    "pto_impedance = np.array([[pto_impedance_11, pto_impedance_12],\n",
    "                        [pto_impedance_21, pto_impedance_22]])\n",
    "\n",
    "pto = wot.pto.PTO(ndof, \n",
    "                  kinematics=[1], \n",
    "                  controller=wot.controllers.unstructured_controller(), \n",
    "                  impedance=pto_impedance, \n",
    "                  loss=None, \n",
    "                  names=None)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Power and Energy\n",
    "Finally, we will wrap the relative motions, force, and impedance functions together to calculate average electrical power. This is again very close to what is found in the PTO module, except `rel_velocity` replaces `wot.pto.PTO.velocity` and `force_from_generator` replaces `wot.pto.PTO.force`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def mechanical_power(wec, x_wec, x_opt, waves, nsubsteps=1):\n",
    "    force_td = force_from_generator(wec, x_wec, x_opt, waves, nsubsteps)\n",
    "    vel_td = rel_velocity(wec, x_wec, x_opt, waves, nsubsteps)\n",
    "    return vel_td * force_td\n",
    "\n",
    "def electrical_power(wec, x_wec, x_opt, waves, nsubsteps=1):\n",
    "    q1_td = rel_velocity(wec, x_wec, x_opt, waves)\n",
    "    e1_td = force_from_generator(wec, x_wec, x_opt, waves)\n",
    "    q1 = wot.complex_to_real(wec.td_to_fd(q1_td, False))\n",
    "    e1 = wot.complex_to_real(wec.td_to_fd(e1_td, False))\n",
    "    vars_1 = np.hstack([q1, e1])\n",
    "    vars_1_flat = wec.dofmat_to_vec(vars_1)\n",
    "    vars_2_flat = np.dot(pto._transfer_mat, vars_1_flat)\n",
    "    vars_2 = wot.vec_to_dofmat(vars_2_flat, 2)\n",
    "    q2 = vars_2[:, 0]\n",
    "    e2 = vars_2[:, 1]\n",
    "    time_mat = wec.time_mat_nsubsteps(nsubsteps)\n",
    "    q2_td = np.dot(time_mat, q2)\n",
    "    e2_td = np.dot(time_mat, e2)\n",
    "    return q2_td * e2_td\n",
    "\n",
    "def energy(wec, x_wec, x_opt, waves, nsubsteps=1):\n",
    "    power_td = electrical_power(wec, x_wec, x_opt, waves, nsubsteps)\n",
    "    return np.sum(power_td) * wec.dt/nsubsteps\n",
    "\n",
    "def average_electrical_power(wec, x_wec, x_opt, waves, nsubsteps=1):\n",
    "    e = energy(wec, x_wec, x_opt, waves, nsubsteps)\n",
    "    return e / wec.tf"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1.4 Constraints\n",
    "The Pioneer model only contains one constraint based on the generator being used:\n",
    "\n",
    "* **Peak torque** - The motor should avoid torques greater than 120 N-m. \n",
    "This is the same basic constraint as `const_f_pto` from Tutorial 1, except we use our `force_from_generator` definition instead of `wot.pto.PTO.force_on_wec`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "max_generator_torque = 25.8 # N*m\n",
    "nsubsteps_constraints = 5\n",
    "\n",
    "def constraint_max_generator_torque(wec, x_wec, x_opt, waves, nsubsteps=nsubsteps_constraints):\n",
    "    torque = force_from_generator(wec, x_wec, x_opt, waves, nsubsteps)\n",
    "    return max_generator_torque - np.abs(torque.flatten())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1.5 Additional forces\n",
    "Here we add in the forces acting on the bodies other than those generated from wave loading.\n",
    "\n",
    "* **Flywheel friction** - The dissipative torque from the generator and components. This is defined as a nonlinear force using both Coulomb friction (dependent on the PTO direction) and the viscous friction (dependent on the PTO speed).\n",
    "\n",
    "* **Magnetic spring** - The restoring torque caused by the torsional spring between the buoy and flywheel. Note a spring gear ratio is included in this equation, as a gearbox is connected in series with the spring. The position of the spring is the relative position of the flywheel and buoy scaled by the reciprocal of gear ratio squared. There are 2 options here: \n",
    "\n",
    "   * Linear spring:  \n",
    "        * Used for simplified modeling purposes \n",
    "        * The WecOptTool optimization problem is first solved with the linear spring, the results from which are used as initialization for the nonlinear spring case\n",
    "\n",
    "   * Nonlinear spring: \n",
    "        * Represents the real spring design developed for this application \n",
    "        * The resultant torque has a periodic \"tilted sine\" profile with respect to the spring angle. This design emulates a linear spring until about 135 degrees in either direction before repreating the torque profile.\n",
    "        * Final result uses the nonlinear spring"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def force_from_friction(wec, x_wec, x_opt, waves = None, nsubsteps = 1):\n",
    "    rel_vel = rel_velocity(wec, x_wec, x_opt, waves, nsubsteps) * flywheel_properties['motor_gear_ratio']\n",
    "    fric =  -1*(\n",
    "        np.tanh(rel_vel)*flywheel_properties['coulomb_friction'] +\n",
    "        rel_vel*flywheel_properties['viscous_friction']\n",
    "    ) * flywheel_properties['motor_gear_ratio']\n",
    "    return fric\n",
    "\n",
    "def linear_spring(pos):\n",
    "    return spring_properties['gear_ratio'] * -spring_properties['stiffness'] * pos\n",
    "\n",
    "def force_from_lin_spring(wec, x_wec, x_opt, waves = None, nsubsteps = 1):\n",
    "        pos = rel_position(wec, x_wec, x_opt, waves, nsubsteps) * spring_properties['gear_ratio']\n",
    "        return linear_spring(pos)\n",
    "\n",
    "def nonlinear_spring(pos):\n",
    "    # 135 deg nonlinear spring\n",
    "    spring_eq_pos_td = pos - np.pi\n",
    "    n = 12\n",
    "    slope = 1/(2**(2*n))*comb(2*n,n)\n",
    "    scale = 1/slope\n",
    "    new_pos = 0\n",
    "    for ind in range(n):\n",
    "        k = ind+1\n",
    "        coeffs = comb(2*n, n-k)/(k*(2**(2*n-1)))\n",
    "        new_pos = new_pos - coeffs*np.sin(k*spring_eq_pos_td)\n",
    "    return spring_properties['gear_ratio'] * -spring_properties['stiffness'] * scale * new_pos\n",
    "\n",
    "def force_from_nl_spring(wec, x_wec, x_opt, waves = None, nsubsteps = 1):\n",
    "    pos = rel_position(wec, x_wec, x_opt, waves, nsubsteps) * spring_properties['gear_ratio']\n",
    "    return nonlinear_spring(pos)\n",
    "\n",
    "spring_angle_rad = np.arange(-2*np.pi, 2*np.pi, np.pi/200)\n",
    "\n",
    "plt.figure()\n",
    "plt.plot(spring_angle_rad,linear_spring(spring_angle_rad), label = 'Linear spring')\n",
    "plt.plot(spring_angle_rad,nonlinear_spring(spring_angle_rad), label = 'Nonlinear spring',ls='--')\n",
    "plt.xlabel('Spring displacement (rad)')\n",
    "plt.ylabel('Spring torque [N-m]')\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1.6 Flywheel residual equation\n",
    "To make sure the flywheel dynamics are properly modeled in the pseudo-spectral method, we will introduce an equality constraint consisting of Newton's 2nd law of motion on the flywheel in residual form:\n",
    "\n",
    "$$ r(x) = I \\alpha - \\tau = 0 $$\n",
    "\n",
    "Note that there are 2 residual equations below, one using the linear spring and another using the nonlinear spring. \n",
    "Both are included because we solve the problem using the linear spring to given initial conditions for the nonlinear spring solve. \n",
    "More information is included in Section 2.1.\n",
    "This is the same structure as the residual for the WEC dynamics described in the [WecOptTool theory documentation](https://sandialabs.github.io/WecOptTool/theory.html).\n",
    "Also compare this equation to the 2nd dynamics equation listed [above](#pitch-resonator).\n",
    "\n",
    "This is required because the equations of motion described by `x_wec` only capture the buoy pitch degree of freedom.\n",
    "This equation provides a second equality constraint to capture the flywheel pitch degree of freedom, resulting in two coupled dynamic equations."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def flywheel_inertia(wec, x_wec, x_opt, waves = None, nsubsteps = 1):\n",
    "    pos_fw = wec.vec_to_dofmat(x_opt[nstate_pto:])\n",
    "    acc_fw = np.dot(wec.derivative2_mat, pos_fw)\n",
    "    time_matrix = wec.time_mat_nsubsteps(nsubsteps)\n",
    "    acc_fw = np.dot(time_matrix, acc_fw)\n",
    "    return flywheel_properties['MOI'] * acc_fw\n",
    "\n",
    "def flywheel_residual_lin_spring(wec, x_wec, x_opt, waves = None, nsubsteps = 1):\n",
    "    resid = (\n",
    "    flywheel_inertia(wec, x_wec, x_opt, waves, nsubsteps) +\n",
    "    force_from_lin_spring(wec, x_wec, x_opt, waves, nsubsteps) +\n",
    "    force_from_friction(wec, x_wec, x_opt, waves, nsubsteps) +\n",
    "    force_from_generator(wec, x_wec, x_opt, waves, nsubsteps)\n",
    "    )\n",
    "    return resid.flatten()\n",
    "\n",
    "def flywheel_residual_nl_spring(wec, x_wec, x_opt, waves = None, nsubsteps = 1):\n",
    "    resid = (\n",
    "    flywheel_inertia(wec, x_wec, x_opt, waves, nsubsteps) +\n",
    "    force_from_nl_spring(wec, x_wec, x_opt, waves, nsubsteps) +\n",
    "    force_from_friction(wec, x_wec, x_opt, waves, nsubsteps) +\n",
    "    force_from_generator(wec, x_wec, x_opt, waves, nsubsteps)\n",
    "    )\n",
    "    return resid.flatten()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We now create the additional forces and constaints that will be passed to the `WEC` object. Note that `f_add` only pertains to the buoy since that is the only degree of freedom included in the BEM data; our flywheel residual equation handles these forces for the flywheel in the opposite direction. Just like for the flywheel residual equations, there are 2 different sets of added forces and constraints, one including the linear spring and another including the nonlinear spring."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "f_add_lin_spring = {\n",
    "    'Generator': force_from_generator,\n",
    "    'Friction': force_from_friction,\n",
    "    'Spring': force_from_lin_spring,\n",
    "}\n",
    "\n",
    "f_add_nl_spring = {\n",
    "    'Generator': force_from_generator,\n",
    "    'Friction': force_from_friction,\n",
    "    'Spring': force_from_nl_spring,\n",
    "}\n",
    "\n",
    "constraints_lin_spring = [\n",
    "    {'type': 'eq', 'fun': flywheel_residual_lin_spring}, # flywheel EoM\n",
    "    {'type': 'ineq', 'fun': constraint_max_generator_torque},\n",
    "]\n",
    "\n",
    "constraints_nl_spring = [\n",
    "    {'type': 'eq', 'fun': flywheel_residual_nl_spring}, # flywheel EoM\n",
    "    {'type': 'ineq', 'fun': constraint_max_generator_torque},\n",
    "]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1.7 WEC object\n",
    "We now have all the information required to create our `WEC` object. The `from_impedance` method is used, because we are using our empirical impedance data. We create one `WEC` object for each of the linear and nonlinear springs."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "wec_lin = wot.WEC.from_impedance(freq_reg, Zi_intrp_reg,exc_coeff_intrp_reg,\n",
    "                            Zi_stiffness,\n",
    "                            f_add_lin_spring,\n",
    "                            constraints_lin_spring)\n",
    "\n",
    "wec_nl = wot.WEC.from_impedance(freq_reg, Zi_intrp_reg,exc_coeff_intrp_reg,\n",
    "                            Zi_stiffness,\n",
    "                            f_add_nl_spring,\n",
    "                            constraints_nl_spring)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2. Regular wave results\n",
    "\n",
    "### 2.1 Solve\n",
    "As in previous tutorials, we will optimize for electrical power absorption. First, we solve the optimization problem using the linear spring case, then we use those results to initialize the nonlinear spring case. This process helps the optimizer (which can have difficulty with highly nonlinear force profiles) converge quicker and more consistently."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "obj_fun = average_electrical_power\n",
    "results = wec_lin.solve(\n",
    "    waves_regular,\n",
    "    obj_fun,\n",
    "    nstate_opt,\n",
    "    scale_x_wec=1e0,\n",
    "    scale_x_opt=np.concatenate((np.array([1e-1])*np.ones(nstate_pto), 1 * np.ones(nstate_fw))),\n",
    "    scale_obj=1e-2,\n",
    ")\n",
    "x_wec_0, x_opt_0 = wec_lin.decompose_state(results[0].x)\n",
    "\n",
    "results = wec_nl.solve(\n",
    "    waves_regular,\n",
    "    obj_fun,\n",
    "    nstate_opt,\n",
    "    x_wec_0=x_wec_0, # initialize with result from linear spring case\n",
    "    x_opt_0=x_opt_0, # initialize with result from linear spring case\n",
    "    scale_x_wec=1e0,\n",
    "    scale_x_opt=np.concatenate((np.array([1e-1])*np.ones(nstate_pto), 1 * np.ones(nstate_fw))),\n",
    "    scale_obj=1e-2,\n",
    ")\n",
    "print(f'Optimal average power: {results[0].fun:.2f} W')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2.2 Post-process and plot\n",
    "Again, since we are not actually using the `PTO` module in the optimization problem, post-processing using `wot.pto.PTO.post_process` is not an option here, so we have to manually post-process the outputs related to the PTO and flywheel.\n",
    "This is pretty intuitive using the functions we created earlier.\n",
    "The outputs related to the buoy can still be derived directly from `wot.wec.post_process`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "nsubsteps = 5\n",
    "wec_fdom, wec_tdom = wec_nl.post_process(wec_nl, results, waves_regular, nsubsteps=nsubsteps)\n",
    "\n",
    "# Manually post-process PTO and flywheel outputs\n",
    "x_wec, x_opt = wot.decompose_state(results[0].x, 1, nfreq_reg)\n",
    "fw_pos = np.dot(wec_nl.time_mat_nsubsteps(nsubsteps), x_opt[nstate_pto:])\n",
    "pto_pos = rel_position(wec_nl, x_wec, x_opt, waves_regular.sel(realization=0), nsubsteps)\n",
    "pto_vel = rel_velocity(wec_nl, x_wec, x_opt, waves_regular.sel(realization=0), nsubsteps)\n",
    "pto_force = force_from_generator(wec_nl, x_wec, x_opt, waves_regular.sel(realization=0), nsubsteps)\n",
    "pto_force_fd = wec_nl.td_to_fd(pto_force[::nsubsteps])\n",
    "spring_force = force_from_nl_spring(wec_nl, x_wec, x_opt, waves_regular.sel(realization=0), nsubsteps)\n",
    "pto_mech_power = mechanical_power(wec_nl, x_wec, x_opt, waves_regular.sel(realization=0), nsubsteps)\n",
    "pto_elec_power = electrical_power(wec_nl, x_wec, x_opt, waves_regular.sel(realization=0), nsubsteps)\n",
    "avg_mech_power = np.mean(pto_mech_power)\n",
    "avg_elec_power = np.mean(pto_elec_power)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Some observations about the optimized Pioneer model:\n",
    "\n",
    " * The flywheel and buoy match frequency, but are out of phase due to the forcing from the spring and motor applied to both bodies.\n",
    " * The gearing in series with the torsional spring (which reduces the effective spring stiffness) significantly amplifies the rotation of the flywheel despite the buoy only pitching modestly.\n",
    " The gear ratio of 3 was selected by the Pioneer team to keep the system in resonance considering the spring stiffness, moment of inertia of the flywheel, and the resonance frequency of the buoy.\n",
    " Try increasing the gear ratio or flywheel moment of inertia—this will actually reduce the power generated since it will bring the effective stiffness of the flywheel out of resonance, causing less motion relative to the buoy.\n",
    " * The nonlinear spring torque is sinusoidal because it stays within the linear region of operation.\n",
    " * The mechanical and electrical power outputs are similar, since our impedance model has only a small amount of resistance and no inductance.\n",
    " * The buoy's pitch amplitude is larger than expected for this device and is likely due to underestimation of the radiation damping by the BEM. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "fig, ax = plt.subplots(nrows=5, sharex=True, figsize=(12, 12))\n",
    "t = wec_tdom.sel(realization=0).time.values\n",
    "\n",
    "# Positions\n",
    "ax[0].plot(t, fw_pos*180/np.pi, label='Flywheel', c='k')\n",
    "ax[0].plot(t, pto_pos*180/np.pi, label='PTO', c='k', ls='--')\n",
    "ax[0].set_title('Pitch Displacements')\n",
    "ax[0].set_ylabel('Position [deg]')\n",
    "ax[0].legend()\n",
    "\n",
    "ax0 = ax[0].twinx()\n",
    "ax0.tick_params(axis='y', labelcolor='b')\n",
    "(wec_tdom.sel(realization=0).pos*180/np.pi).plot(hue='influenced_dof', label='Buoy', ax=ax0, c='b')\n",
    "ax0.set_ylabel('Buoy pos. [deg]', color='b')\n",
    "ax0.set_title('')\n",
    "\n",
    "# Torques\n",
    "ax[1].plot(t, pto_force, c='k')\n",
    "ax[1].plot([t[0], t[-1]], [max_generator_torque, max_generator_torque], 'k--')\n",
    "ax[1].plot([t[0], t[-1]], [-1*max_generator_torque, -1*max_generator_torque], 'k--')\n",
    "ax[1].set_ylabel('PTO torque [N-m]')\n",
    "ax[1].set_title('Torque')\n",
    "\n",
    "ax1 = ax[1].twinx()\n",
    "ax1.tick_params(axis='y', labelcolor='b')\n",
    "# when using an impedance model, the excitation force cannot be split up into Froude-Krylov and diffraction\n",
    "wec_tdom.sel(realization=0)['force'].sel(type='excitation').plot(ax=ax1, c='b') \n",
    "ax1.set_ylabel('Excitation torque [N-m]', color='b')\n",
    "ax1.set_title('Torque')\n",
    "\n",
    "# PTO Velocity\n",
    "ax[2].plot(t, pto_vel)\n",
    "ax[2].set_title('PTO Velocity')\n",
    "ax[2].set_ylabel('Velocity [deg/s]')\n",
    "\n",
    "# Spring\n",
    "ax[3].plot(t, spring_force, c='k')\n",
    "ax[3].set_title('Nonlinear Spring Torque')\n",
    "ax[3].set_ylabel('Torque [N-m]')\n",
    "\n",
    "ax3 = ax[3].twinx()\n",
    "ax3.tick_params(axis='y', labelcolor='b')\n",
    "ax3.plot(t, pto_pos, c='b')\n",
    "ax3.set_ylabel('PTO pos. [deg]', color='b')\n",
    "ax3.set_title('')\n",
    "\n",
    "# Power\n",
    "ax[4].plot(t, pto_mech_power, label='Mech. power ($\\\\bar{P}_{mech}$: ' + f'{avg_mech_power:.1f} W)')\n",
    "ax[4].plot(t, pto_elec_power, linestyle='dashdot', label='Elec. power ($\\\\bar{P}_{elec}$: ' + f'{avg_elec_power:.1f} W)')\n",
    "ax[4].set_title('Power Output')\n",
    "ax[4].set_ylabel('Power [W]')\n",
    "ax[4].legend()\n",
    "ax[4].set_xlabel('Time [s]')\n",
    "\n",
    "for axi in ax:\n",
    "    axi.grid()\n",
    "    axi.label_outer()\n",
    "    axi.autoscale(axis='x', tight=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2.3 Sankey Diagram\n",
    "We use a Sankey diagram to visualize the average power flow from waves to electricity.\n",
    "The left end shows the theoretically possible optimal excitation.\n",
    "In order to reach this upper bound of excitation, the WEC pitch velocity would need to be in phase with the pitch excitation force (or, in this case, the radiated power is equal the amount of absorbed mechanical power).\n",
    "In practice, this will usually imply putting electrical power into the system (something we want to avoid!!!).\n",
    "\n",
    "With co-design, we are instead tapping the unused potential while limiting PTO losses and radiated power."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "Zi = Zi_intrp_reg\n",
    "Rad_res = np.real(Zi.squeeze())\n",
    "\n",
    "Fex = wec_fdom.sel(realization=0).force.sel(type=['excitation'])\n",
    "Vel = wec_fdom.sel(realization=0).vel\n",
    "\n",
    "P_max_absorbable = (np.abs(Fex)**2/(8*Rad_res) ).squeeze().sum('omega').item() # after Falnes Eq. 6.10\n",
    "P_opt_excitation = 2*P_max_absorbable # after Falnes Eq. 6.10\n",
    "P_radiated = ((1/2)*(Rad_res * np.abs(Vel)**2 ).squeeze().sum('omega').item()) # after Falnes Eq. 6.4\n",
    "P_excited= (1/4)*(Fex*np.conjugate(Vel) + np.conjugate(Fex)*Vel ).squeeze().sum('omega').item() # after Falnes Eq. 6.3\n",
    "\n",
    "power_flows = {'Optimal Excitation' : -2* (np.real(P_max_absorbable)),    \n",
    "            'Radiated': -1*(np.real(P_radiated)), \n",
    "            'Actual Excitation': -1*(np.real(P_excited)), \n",
    "}\n",
    "power_flows['Unused Potential'] =  power_flows['Optimal Excitation'] - power_flows['Actual Excitation']\n",
    "power_flows['Absorbed'] =  power_flows['Actual Excitation'] - power_flows['Radiated']  # after Falnes Eq. 6.2 "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We also calculate the power dissipated due to flywheel friction and make sure that the absorbed power (calculated as the difference between excited and radiated power) matches the sum of mechanical power captured by the PTO and the power dissipated due to flywheel friction. We use a relative tolerance of 1%."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "def fw_velocity(wec, x_wec, x_opt, waves, nsubsteps=1):\n",
    "    pos_fw = wec.vec_to_dofmat(x_opt[nstate_pto:])\n",
    "    vel_fw = np.dot(wec.derivative_mat, pos_fw)\n",
    "    time_matrix = wec.time_mat_nsubsteps(nsubsteps)\n",
    "    return np.dot(time_matrix, vel_fw)\n",
    "\n",
    "def fw_friction_power(wec, x_wec, x_opt, waves, nsubsteps=1):\n",
    "    force_td = force_from_friction(wec, x_wec, x_opt, waves, nsubsteps)\n",
    "    vel_td = fw_velocity(wec, x_wec, x_opt, waves, nsubsteps)\n",
    "    return vel_td * force_td\n",
    "\n",
    "fw_fric_power = fw_friction_power(wec_nl, x_wec, x_opt, waves_regular, nsubsteps)\n",
    "avg_fw_fric_power = np.mean(fw_fric_power)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "power_flows['Electrical (solver)'] = avg_elec_power  #solver determines sign\n",
    "power_flows['Mechanical (solver)'] = avg_mech_power - avg_fw_fric_power #solver determines sign, friction is dissipated\n",
    "power_flows['PTO Loss'] = power_flows['Mechanical (solver)'] -  power_flows['Electrical (solver)'] "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "wot.utilities.plot_power_flow(power_flows,tolerance=-1e-2*power_flows['Optimal Excitation']) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3. Irregular wave\n",
    "\n",
    "### 3.1 Solve\n",
    "We will now run the same analysis for irregular waves. First, we need to recreate the PTO and WEC with the irregular frequency spectrum.\n",
    "\n",
    "Interestingly, due to the narrow banded resonance of the flywheel, the controller attempts to make the excitation force monochromatic with the resonant frequency.\n",
    "To achieve this, it uses significant reactive power (power by the PTO into the system).\n",
    "This is still worth it though, resulting in a larger average electrical power output.\n",
    "\n",
    "As noted previously, the optimization problem is solved for each wave realization.\n",
    "The optimal average power shown is the total average across the different realizations."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "nstate_pto = 2 * nfreq_irreg # PTO forces\n",
    "nstate_fw = 2 * nfreq_irreg  # Flywheel positions\n",
    "nstate_opt = nstate_pto + nstate_fw\n",
    "\n",
    "drivetrain_impedance = (1j*omega_irreg*pto_properties['drivetrain_inertia'] +\n",
    "                    pto_properties['drivetrain_friction'] +\n",
    "                    1/(1j*omega_irreg)*pto_properties['drivetrain_stiffness'])\n",
    "\n",
    "winding_impedance = pto_properties['winding_resistance'] + 1j*omega_irreg*pto_properties['winding_inductance']\n",
    "\n",
    "pto_impedance_11 = -1* pto_properties['gear_ratio']**2 * drivetrain_impedance\n",
    "off_diag = np.sqrt(3.0/2.0) * pto_properties['torque_constant'] * pto_properties['gear_ratio']\n",
    "pto_impedance_12 = -1*(off_diag+0j) * np.ones(omega_irreg.shape)\n",
    "pto_impedance_21 = -1*(off_diag+0j) * np.ones(omega_irreg.shape)\n",
    "pto_impedance_22 = winding_impedance\n",
    "pto_impedance = np.array([[pto_impedance_11, pto_impedance_12],\n",
    "                        [pto_impedance_21, pto_impedance_22]])\n",
    "\n",
    "pto = wot.pto.PTO(ndof, \n",
    "                  kinematics=[1], \n",
    "                  controller=wot.controllers.unstructured_controller(), \n",
    "                  impedance=pto_impedance, \n",
    "                  loss=None, \n",
    "                  names=None)\n",
    "\n",
    "wec_lin = wot.WEC.from_impedance(freq_irreg, \n",
    "                            Zi_intrp_irreg,\n",
    "                            exc_coeff_intrp_irreg,\n",
    "                            Zi_stiffness,\n",
    "                            f_add_lin_spring,\n",
    "                            constraints_lin_spring)\n",
    "\n",
    "wec_nl = wot.WEC.from_impedance(freq_irreg, \n",
    "                            Zi_intrp_irreg,\n",
    "                            exc_coeff_intrp_irreg,\n",
    "                            Zi_stiffness,\n",
    "                            f_add_nl_spring,\n",
    "                            constraints_nl_spring)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import logging \n",
    "logging.getLogger().setLevel(logging.DEBUG)\n",
    "\n",
    "obj_fun = average_electrical_power\n",
    "results = wec_lin.solve(\n",
    "    waves_irregular,\n",
    "    obj_fun,\n",
    "    nstate_opt,\n",
    "    scale_x_wec=1e0,\n",
    "    scale_x_opt=np.concatenate((np.array([1e-1])*np.ones(nstate_pto), 1 * np.ones(nstate_fw))),\n",
    "    scale_obj=1e-2,\n",
    ")\n",
    "x_wec_0, x_opt_0 = wec_lin.decompose_state(results[0].x)\n",
    "\n",
    "results = wec_nl.solve(\n",
    "    waves_irregular,\n",
    "    obj_fun,\n",
    "    nstate_opt,\n",
    "    x_wec_0=x_wec_0, # initialize with result from linear spring case\n",
    "    x_opt_0=x_opt_0, # initialize with result from linear spring case\n",
    "    scale_x_wec=1e0,\n",
    "    scale_x_opt=np.concatenate((np.array([1e-1])*np.ones(nstate_pto), 1 * np.ones(nstate_fw))),\n",
    "    scale_obj=1e-2,\n",
    ")\n",
    "print(f'Optimal average power: {results[0].fun:.2f} W')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 3.2 Post-process and plot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "nsubsteps = 5\n",
    "wec_fdom, wec_tdom = wec_nl.post_process(wec_nl,results, waves_irregular, nsubsteps=nsubsteps)\n",
    "\n",
    "# Manually post-process PTO and flywheel outputs\n",
    "x_wec, x_opt = wot.decompose_state(results[0].x, 1, nfreq_irreg)\n",
    "fw_pos = np.dot(wec_nl.time_mat_nsubsteps(nsubsteps), x_opt[nstate_pto:])\n",
    "pto_pos = rel_position(wec_nl, x_wec, x_opt, waves_irregular.sel(realization=0), nsubsteps)\n",
    "pto_vel = rel_velocity(wec_nl, x_wec, x_opt, waves_irregular.sel(realization=0), nsubsteps)\n",
    "pto_force = force_from_generator(wec_nl, x_wec, x_opt, waves_irregular.sel(realization=0), nsubsteps)\n",
    "pto_force_fd = wec_nl.td_to_fd(pto_force[::nsubsteps])\n",
    "spring_force = force_from_nl_spring(wec_nl, x_wec, x_opt, waves_regular.sel(realization=0), nsubsteps)\n",
    "pto_mech_power = mechanical_power(wec_nl, x_wec, x_opt, waves_irregular.sel(realization=0), nsubsteps)\n",
    "pto_elec_power = electrical_power(wec_nl, x_wec, x_opt, waves_irregular.sel(realization=0), nsubsteps)\n",
    "avg_mech_power = np.mean(pto_mech_power)\n",
    "avg_elec_power = np.mean(pto_elec_power)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "fig, ax = plt.subplots(nrows=5, sharex=True, figsize=(12, 12))\n",
    "t = wec_tdom.sel(realization=0).time.values\n",
    "\n",
    "# Positions\n",
    "ax[0].plot(t, fw_pos*180/np.pi, label='Flywheel', c='k')\n",
    "ax[0].plot(t, pto_pos*180/np.pi, label='PTO', c='k', ls='--')\n",
    "ax[0].set_title('Pitch Displacements')\n",
    "ax[0].set_ylabel('Position [deg]')\n",
    "ax[0].legend()\n",
    "\n",
    "ax0 = ax[0].twinx()\n",
    "ax0.tick_params(axis='y', labelcolor='b')\n",
    "(wec_tdom.sel(realization=0).pos*180/np.pi).plot(hue='influenced_dof', label='Buoy', ax=ax0, c='b')\n",
    "ax0.set_ylabel('Buoy pos. [deg]', color='b')\n",
    "ax0.set_title('')\n",
    "\n",
    "# Torques\n",
    "ax[1].plot(t, pto_force, c='k')\n",
    "ax[1].plot([t[0], t[-1]], [max_generator_torque, max_generator_torque], 'k--')\n",
    "ax[1].plot([t[0], t[-1]], [-1*max_generator_torque, -1*max_generator_torque], 'k--')\n",
    "ax[1].set_ylabel('PTO torque [N-m]')\n",
    "ax[1].set_title('Torque')\n",
    "\n",
    "ax1 = ax[1].twinx()\n",
    "ax1.tick_params(axis='y', labelcolor='b')\n",
    "wec_tdom.sel(realization=0)['force'].sel(type=['excitation']).plot(ax=ax1, c='b')\n",
    "ax1.set_ylabel('Excitation torque [N-m]', color='b')\n",
    "ax1.set_title('Torque')\n",
    "\n",
    "# PTO Velocity\n",
    "ax[2].plot(t, pto_vel)\n",
    "ax[2].set_title('PTO Velocity')\n",
    "ax[2].set_ylabel('Velocity [deg/s]')\n",
    "\n",
    "# Spring\n",
    "ax[3].plot(t, spring_force, c='k')\n",
    "ax[3].set_title('Nonlinear Spring Torque')\n",
    "ax[3].set_ylabel('Torque [N-m]')\n",
    "\n",
    "ax3 = ax[3].twinx()\n",
    "ax3.tick_params(axis='y', labelcolor='b')\n",
    "ax3.plot(t, pto_pos, c='b')\n",
    "ax3.set_ylabel('PTO pos. [deg]', color='b')\n",
    "ax3.set_title('')\n",
    "\n",
    "# Power\n",
    "ax[4].plot(t, pto_mech_power, label='Mech. power ($\\\\bar{P}_{mech}$: ' + f'{avg_mech_power:.1f} W)')\n",
    "ax[4].plot(t, pto_elec_power, linestyle='dashdot', label='Elec. power ($\\\\bar{P}_{elec}$: ' + f'{avg_elec_power:.1f} W)')\n",
    "ax[4].set_title('Power Output')\n",
    "ax[4].set_ylabel('Power [W]')\n",
    "ax[4].legend()\n",
    "ax[4].set_xlabel('Time [s]')\n",
    "\n",
    "for axi in ax:\n",
    "    axi.grid()\n",
    "    axi.label_outer()\n",
    "    axi.autoscale(axis='x', tight=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 3.3 Notes on selection of frequency array and realizations\n",
    "In order to determine a suitable frequency range, it is best to complete an optimization with a large frequency range and examine the frequency domain results to see how large a range of frequencies is necessary to capture the relavent dynamics.\n",
    "Often, capturing nonlinear dynamics (such as due to constraints) requires a larger frequency range.\n",
    "In the case of the Pioneer WEC, it is clear that (likely due to the PTO torque constraint) the nonlinearities cause excitation at the odd harmonics of the excited frequency (which is slightly larger than the wave frequency itself for the Pioneer system).\n",
    "Specifically, the PTO force has significant peaks around the excited frequency and at the 3rd harmonic (with a small peak at the 5th harmonic as well) which leads to peaks in the frequency spectrum of electrical power at the 2nd, 4th, and 6th harmonics.\n",
    "The frequency values are normalized in the plots below to more clearly show the harmonics.\n",
    "In order to capture most of these nonlinearities, we chose a frequency range from 0 to 1.875 for this tutorial. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "filename = 'data/tutorial_4_freq_range.nc'\n",
    "results = wot.read_netcdf(filename)\n",
    "\n",
    "excited_freq = abs(results['pos']).argmax()\n",
    "normalized_freq = results['freq']/results['freq'][excited_freq]\n",
    "\n",
    "fig, ax = plt.subplots(5,1,figsize=(8, 12))\n",
    "ax[0].stem(normalized_freq,abs(results['exc_force']))\n",
    "ax[0].set_ylabel('Excitation Torque [N-m]')\n",
    "ax[1].stem(normalized_freq,abs(results['pos']))\n",
    "ax[1].set_ylabel('WEC Position [rad]')\n",
    "ax[2].stem(normalized_freq,abs(results['vel']))\n",
    "ax[2].set_ylabel('WEC Velocity [rad/s]')\n",
    "ax[3].stem(normalized_freq,abs(results['pto_force']))\n",
    "ax[3].set_ylabel('PTO Torque [N-m]')\n",
    "ax[4].stem(normalized_freq,abs(results['power']))\n",
    "ax[4].set_ylabel('Electrical Power [W]')\n",
    "ax[4].set_xlabel('Frequency (normalized according to excited frequency)')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "After determining a frequency range of interest, it is important to make sure enough frequencies are included in the array to generate accurate results.\n",
    "The Pioneer WEC has a very narrow banded response, which means it requires a large number of frequencies to model the response accurately.\n",
    "For any WecOptTool analysis in irregular wave conditions, it is best to complete a convergence study on the number of frequencies in the wave conditions of interest.\n",
    "The convergence study shown below varies the number of frequencies and includes enough realizations of each array to reach a 20 minute total simulation time (discussed further below).\n",
    "As shown below, an array of 150 frequencies is sufficient to model the system to within about 2% of the actual resultant mean power.\n",
    "Because the computation time increases with increasing number of frequencies, it is desirable to select the number of frequencies to minimize the computation time while meeting the intended accuracy."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "filename = 'data/tutorial_4_nfreqs.nc'\n",
    "results = wot.read_netcdf(filename)\n",
    "\n",
    "power_percent_error = abs((results['power'] - results['power'][-1])/results['power'][-1])*100\n",
    "time_per_realization = results['comp_time']/results['nrealizations']\n",
    "\n",
    "plt.figure()\n",
    "plt.plot(results['nfreqs'],power_percent_error)\n",
    "plt.xlabel('Number of Frequencies in Array')\n",
    "plt.ylabel('Absolute Mean Power Error [%]')\n",
    "\n",
    "plt.figure()\n",
    "plt.semilogy(results['nfreqs'],time_per_realization/60)\n",
    "plt.xlabel('Number of Frequencies in Array')\n",
    "plt.ylabel('Computation time per realization [min]')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next, the number of phase realizations should be considered.\n",
    "Generally, it is recommended that enough realizations be used for the total simulation time to equal 20 minutes. \n",
    "\n",
    "$$ t_{total} = \\frac{n_{realizations}}{f1} $$\n",
    "\n",
    "Although it usually leads to consistent results, this recommendation is somewhat arbitrary.\n",
    "To better understand the effect of the number of realizations on the overall result, it can be useful to complete a convergence study.\n",
    "The actual number of realizations needed depends on the problem itself (dynamics, constraints, etc.) and the desired precision of the result.\n",
    "As shown below, in the case of the Pioneer WEC, after about 15 realizations (20 minutes total simulation time) the result is within about 0.5% of the converged result which is deemed sufficient for this study."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "filename = 'data/tutorial_4_nrealizations.nc'\n",
    "results = wot.read_netcdf(filename)\n",
    "\n",
    "rolling_mean = []\n",
    "for ind in range(len(results['power'])):\n",
    "    rolling_mean.append(np.mean(results['power'][0:ind]))\n",
    "    \n",
    "error_bar = rolling_mean[-1]*.005\n",
    "\n",
    "fig = plt.figure()\n",
    "ax1 = fig.add_subplot(111)\n",
    "ax2 = ax1.twiny()\n",
    "ax1.plot(results['realization'],rolling_mean,label='Rolling Mean')\n",
    "ax1.set_xlabel('Number of Realizations')\n",
    "ax1.set_ylabel('Average Power [W]')\n",
    "ax1.axhline(rolling_mean[-1]+error_bar,ls='--',label='0.5% error')\n",
    "ax1.axhline(rolling_mean[-1]-error_bar,ls='--')\n",
    "ax1.legend()\n",
    "\n",
    "tper_realization = (results['nfreq']/results['fend']).values # time per realization\n",
    "\n",
    "def tick_function(X):\n",
    "    V = tper_realization*X/60\n",
    "    return [\"%.1f\" % z for z in V]\n",
    "\n",
    "ax2.set_xticks(ax1.get_xticks())\n",
    "ax2.set_xbound(ax1.get_xbound())\n",
    "ax2.set_xticklabels(tick_function(ax1.get_xticks()))\n",
    "ax2.set_xlabel('Total simulation time [min]')"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "wot_dev",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
